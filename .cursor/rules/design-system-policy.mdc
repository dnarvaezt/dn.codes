## 12) Estética visual obligatoria: minimalista, moderna, elegante y sutil

- Minimalismo total: priorizar espacio en blanco, jerarquía tipográfica y composición limpia; eliminar elementos decorativos no esenciales.
- Atractivo y moderno: microinteracciones sutiles (transition 150–300ms, ease-*), superficies planas, acentos controlados con `--primary`.
- Elegancia sutil: sombras suaves (`shadow-sm`/`shadow-md`), bordes y radios consistentes (alineados a `--radius`), opacidades moderadas.
- Sobriedad cromática: paletas neutras basadas en tokens HSL; evitar gradientes, saturaciones altas y contrastes estridentes.
- Claridad visual: evitar sobrecarga de información; densidad y espaciado según escala Tailwind; foco en legibilidad y orden.

# Política estricta del Sistema de Diseño (Flat UI · shadcn · Tailwind)

## 1) Regla Suprema: REUTILIZAR SIEMPRE ANTES DE CREAR
- Debes verificar si el componente ya existe antes de crear uno nuevo.
- Crear un nuevo componente es el ÚLTIMO recurso. La prioridad es:
  1. Reusar componente existente (shadcn/ui o internos del proyecto).
  2. Componer/parametrizar uno existente para cubrir la necesidad.
  3. Extender de forma mínima sin romper contratos existentes.
  4. Crear componente nuevo solo si 1-3 no son viables y con justificación clara.
- Queda prohibido duplicar componentes, estilos o lógica visual.

## 2) Librerías y tecnologías OBLIGATORIAS
- UI base: shadcn/ui (con Radix) instalada en el proyecto.
- Estilos: Tailwind CSS exclusivamente.
- Tokens/variables: usar variables HSL de shadcn y utilidades de Tailwind; no usar colores/valores hardcodeados.

## 3) Tokens y theming (NUNCA hardcodear)
- Colores: usar variables HSL semánticas (p. ej. `bg-background`, `text-foreground`, `border-border`, `bg-primary`, `text-muted-foreground`).
- Tipografía: usar escalas de Tailwind (`text-sm`, `text-base`, `text-lg`, etc.) y `font-*`.
- Espaciado: usar la escala Tailwind (`p-*`, `m-*`, `gap-*`, `space-*`).
- Bordes y radios: `border`, `border-*`, `rounded-*` (alineados a `--radius`).
- Sombras: `shadow-*` de Tailwind; evitar sombras pesadas por Flat UI.
- Transiciones/animaciones: utilidades Tailwind (`transition-*`, `duration-*`, `ease-*`, `animate-*`).

## 4) Flat UI como línea visual
- Sin gradientes, sin efectos skeuomórficos, sin glas effects por defecto.
- Uso mínimo y sutil de sombras (`shadow-sm` a `shadow-md`), foco en superficies planas.
- Jerarquía por color semántico, tipografía y espaciado; no por decoraciones.

## 5) Consistencia y coherencia obligatoria
- El mismo patrón de estilos y composición debe repetirse en toda la app.
- No mezclar estilos inline ni clases ad hoc fuera de Tailwind.
- Prohibido usar colores hex/rgb directos o medidas arbitrarias (px/rem) fuera de la escala.

## 6) Mobile-first y soporte de temas (dark/light)
- Diseño mobile-first obligatorio; resolver primero en pantallas pequeñas.
- Soporte obligatorio para modo claro y oscuro usando las variables HSL.
- Respetar estados de foco/accesibilidad: `focus-visible`, `ring` usando `--ring`.

## 7) Proceso estricto antes de crear un componente
Debes cumplir, en orden, antes de crear:
1. ¿Existe en shadcn/ui o ya en `src/infrastructure/components`? → REUTILIZAR.
2. ¿Se puede cubrir con composición/slots/props de un componente existente? → REUTILIZAR/COMPONER.
3. ¿Se puede extender sin romper API ni duplicar lógica? → EXTENDER MÍNIMO.
4. Solo si nada anterior aplica: CREAR. Requisitos al crear:
   - Nombre y carpeta en kebab-case.
   - Sin `export default`; solo exportaciones nombradas.
   - `index.ts` solo con `export *` (barrel), sin lógica.
   - Estilos exclusivamente con Tailwind (opcionalmente `@apply` en .scss del componente si ya existe patrón del proyecto) y usando tokens HSL.
   - API mínima, clara y documentada internamente (sin comentarios extensos), pensada para reuso.

## 8) Accesibilidad mínima obligatoria
- Navegación por teclado y estados de foco visibles.
- Roles/aria-labels adecuados cuando aplique.
- Contraste suficiente garantizado por los tokens semánticos.

## 9) Reglas de prohibición
- Prohibido crear componentes si existe uno equivalente en shadcn/ui o en el repositorio.
- Prohibido copiar/pegar componentes con cambios menores; parametrizar en su lugar.
- Prohibido usar estilos inline, colores hex/rgb, valores fuera de la escala Tailwind.
- Prohibido romper consistencia de dark/light o de mobile-first.

## 10) Criterios de aceptación de UI
- Reutiliza o compón componentes existentes.
- Usa exclusivamente Tailwind y tokens HSL semánticos.
- Cumple Flat UI: superficies planas, mínima sombra, sin gradientes.
- Funciona y se ve correctamente en mobile, dark y light.
- Mantiene coherencia con el resto del sistema (nombres, estructura, exportaciones, estilos).

El incumplimiento de cualquier punto invalida la propuesta de UI y debe corregirse antes de integrar cambios.

## 11) MCP de shadcn/ui: lineamientos y configuración oficial del proyecto

Debes seguir la documentación oficial de shadcn/ui y usar SIEMPRE su CLI conforme al `components.json` del repositorio.

Configuración vigente (no modificar sin aprobación explícita):
- `$schema`: `https://ui.shadcn.com/schema.json`
- `style`: `default`
- `rsc`: `false` (los componentes generados son Client Components; si necesitas server boundaries, compón sin alterar el origen)
- `tsx`: `true`
- `tailwind.config`: `tailwind.config.ts`
- `tailwind.css`: `src/infrastructure/assets/globals.scss` (entrada única con `@tailwind base; components; utilities;` y variables HSL)
- `tailwind.baseColor`: `neutral`
- `tailwind.cssVariables`: `true` (usar variables HSL semánticas)
- `aliases`:
  - `components`: `@/infrastructure/components`
  - `utils`: `@/infrastructure/utils`
  - `ui`: `@/infrastructure/components/ui` (ruta OBLIGATORIA para importar UI generada)

Reglas de uso del MCP:
- Alta de componentes: usar la CLI de shadcn/ui para agregar/actualizar componentes. Prohibido copiar manualmente desde la web.
- Ubicación: todos los componentes generados viven en `src/infrastructure/components/ui` respetando las rutas/aliases configurados.
- Importación: importar SIEMPRE desde `@/infrastructure/components/ui` y utilidades desde `@/infrastructure/utils`.
- Utilidad de clases: usar `cn` de `@/infrastructure/utils/class-names` para combinar clases Tailwind.
- Tailwind y plugins: `tailwindcss-animate` está activo; usar sus utilidades cuando aplique. No agregar CSS inline ni valores fuera de la escala.
- Theming: `darkMode` opera con `[data-theme='dark']` (ver `tailwind.config.ts`); los componentes deben respetar tokens `--*` y funcionar en light/dark sin overrides locales.
- No editar núcleo innecesariamente: evita modificar los componentes base generados. Si una variación es necesaria, compón por encima; si la edición es imprescindible, documenta el cambio y mantenlo mínimo para facilitar upgrades.
- Upgrades: cuando actualices un componente mediante la CLI, resuelve conflictos manteniendo tokens, aliases y consistencia de imports. No rompas la API existente sin justificación.
- Accesibilidad Radix: conserva props, roles y comportamiento accesible que proveen los primitives.

Criterio de validación MCP:
- El componente fue agregado/actualizado con la CLI (trazable contra `components.json`).
- Vive bajo `src/infrastructure/components/ui` y se importa por alias `@/infrastructure/components/ui`.
- Usa `cn`, Tailwind, tokens HSL y respeta dark/light.
- No hay duplicación ni forks innecesarios; se compone antes de editar.
