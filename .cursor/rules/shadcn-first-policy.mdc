---
alwaysApply: true
---

# Shadcn como Fuente de Verdad para Componentes UI

## Regla Principal

- **shadcn/ui** es la fuente de verdad para todos los componentes UI del proyecto
- SIEMPRE validar primero si un componente existe en shadcn antes de crear uno personalizado
- React Context queda prohibido para gestión de estado compartido entre componentes

## Validación Obligatoria Antes de Crear Componentes

### Checklist Pre-Creación

Antes de crear cualquier componente UI, DEBES:

1. **Consultar la documentación de shadcn/ui** (https://ui.shadcn.com)
2. **Verificar si existe un componente equivalente** en shadcn
3. **Evaluar si el componente puede adaptarse** al caso de uso específico
4. **Intentar composición** de componentes existentes antes de crear nuevos

## Cuándo Usar Componentes de Shadcn

### ✅ Uso Obligatorio

- Cualquier componente UI estándar (Button, Input, Card, Dialog, etc.)
- Componentes de formulario (Select, Checkbox, Radio, Switch, etc.)
- Componentes de navegación (Tabs, Navigation Menu, Breadcrumb, etc.)
- Componentes de feedback (Alert, Toast, Progress, Skeleton, etc.)
- Componentes de overlay (Modal, Popover, Tooltip, Sheet, etc.)
- Componentes de datos (Table, DataTable, Accordion, etc.)

### 🔄 Proceso de Implementación

1. **Identificar necesidad**: Definir qué componente UI se necesita
2. **Buscar en shadcn**: Consultar catálogo de componentes
3. **Instalar si existe**: Usar CLI de shadcn para agregar el componente
4. **Adaptar con props**: Personalizar mediante props nativas del componente
5. **Extender con composición**: Combinar componentes existentes si es necesario

## Instalación de Componentes Shadcn

### Comando Base

```bash
npx shadcn@latest add [component-name]
```

### Ejemplos

```bash
npx shadcn@latest add button
npx shadcn@latest add input
npx shadcn@latest add dialog
npx shadcn@latest add select
```

## Adaptación y Personalización

### ✅ Formas Permitidas de Personalizar

1. **Props nativas**: Usar las props que el componente ya expone
2. **className con Tailwind**: Aplicar clases de utilidad para estilos específicos
3. **Composición**: Combinar múltiples componentes de shadcn
4. **Wrapper components**: Crear wrappers que encapsulen configuración común

```typescript
// ✅ CORRECTO: Usar componente de shadcn y adaptarlo
import { Button } from '@/components/ui/button';

export const PrimaryButton = ({ children, ...props }) => {
  return (
    <Button
      variant="default"
      size="lg"
      className="bg-primary hover:bg-primary/90"
      {...props}
    >
      {children}
    </Button>
  );
};
```

### ❌ Formas Prohibidas

```typescript
// ❌ INCORRECTO: Crear botón desde cero cuando existe en shadcn
export const CustomButton = ({ children }) => {
  return (
    <button className="px-4 py-2 bg-blue-500 rounded">
      {children}
    </button>
  );
};
```

## Cuándo Crear Componentes Personalizados

### Excepciones Permitidas

Solo crear componentes personalizados cuando:

1. **No existe equivalente en shadcn**: El componente es único del dominio de negocio
2. **Componente compuesto específico**: Combina múltiples componentes de shadcn con lógica de negocio
3. **Componente de dominio**: Representa una entidad o concepto específico del proyecto

### Requisitos para Componentes Personalizados

Si DEBES crear un componente personalizado:

- [ ] Documentar por qué no se usó shadcn
- [ ] Usar componentes de shadcn como base cuando sea posible
- [ ] Seguir las mismas convenciones de estilo (Tailwind + SCSS)
- [ ] Mantener la misma estructura de carpetas
- [ ] Crear tests siguiendo el patrón del proyecto

## Estructura de Componentes con Shadcn

### Ubicación en el Proyecto

```text
src/components/
├── ui/                    # Componentes de shadcn (generados automáticamente)
│   ├── button/
│   ├── input/
│   └── dialog/
├── layout/                # Componentes de layout (pueden usar shadcn internamente)
│   ├── navbar/
│   └── footer/
└── [feature]/            # Componentes específicos de features
    └── user-profile/     # Usan componentes de ui/ internamente
```

## Reglas de Implementación

### 1. 📦 No Duplicar Componentes

- NUNCA recrear un componente que existe en shadcn
- NUNCA crear variaciones innecesarias de componentes base
- SIEMPRE reutilizar componentes existentes

### 2. 🎯 Composición sobre Creación

- Preferir combinar componentes existentes
- Usar props para variaciones de estilo
- Crear wrappers solo cuando sea necesario para evitar repetición

### 3. 🔍 Importación Correcta

```typescript
// ✅ CORRECTO: Importar desde ui/
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Dialog, DialogContent, DialogHeader } from '@/components/ui/dialog';

// ❌ INCORRECTO: Crear propios componentes base
import { Button } from '@/components/custom/button';
```

### 4. 🛠️ Extensión mediante Props

```typescript
// ✅ CORRECTO: Extender con props y variantes
import { Button } from '@/components/ui/button';

<Button variant="destructive" size="sm">Eliminar</Button>
<Button variant="outline" size="lg">Cancelar</Button>
```

### 5. 📝 TypeScript con Tipos de Shadcn

```typescript
// ✅ CORRECTO: Usar tipos exportados por shadcn
import { Button, type ButtonProps } from '@/components/ui/button';

interface CustomButtonProps extends ButtonProps {
  isLoading?: boolean;
}

export const LoadingButton = ({ isLoading, children, ...props }: CustomButtonProps) => {
  return (
    <Button disabled={isLoading} {...props}>
      {isLoading ? 'Cargando...' : children}
    </Button>
  );
};
```

## Validación de Cumplimiento

### Checklist Antes de Crear Componente UI

- [ ] ¿Busqué este componente en shadcn/ui?
- [ ] ¿Verifiqué que NO existe en shadcn?
- [ ] ¿Evalué si puedo componerlo con componentes existentes?
- [ ] ¿Intenté adaptarlo con props antes de crear uno nuevo?
- [ ] ¿Es realmente necesario crear uno personalizado?

## Anti-Patrones Prohibidos

### ❌ No Hacer

- Crear componentes Button, Input, Select, Dialog personalizados
- Duplicar lógica de componentes que ya existen en shadcn
- Ignorar la documentación de shadcn
- Crear variantes innecesarias sin usar el sistema de variantes de shadcn
- Mezclar componentes de múltiples bibliotecas UI

## Flujo de Decisión

```mermaid
flowchart TD
    A[Necesito un componente UI] --> B{¿Existe en shadcn?}
    B -->|Sí| C[Instalar con CLI de shadcn]
    B -->|No| D{¿Puedo componerlo?}
    C --> E[Usar y adaptar con props]
    D -->|Sí| F[Componer componentes existentes]
    D -->|No| G{¿Es específico del dominio?}
    F --> E
    G -->|Sí| H[Crear componente personalizado]
    G -->|No| I[Reconsiderar necesidad o buscar alternativa]
    H --> J[Usar shadcn como base interna]
```

## Recursos

### Documentación Oficial

- Catálogo de componentes: https://ui.shadcn.com/docs/components
- CLI: https://ui.shadcn.com/docs/cli
- Instalación: https://ui.shadcn.com/docs/installation

### Verificación en Proyecto

Para ver componentes instalados de shadcn:

```bash
cat components.json
ls -la src/components/ui/
```

## Mantra

"Shadcn primero. Adaptar antes que crear. Componer antes que duplicar. La fuente de verdad es shadcn/ui."

## Integración con Otras Reglas

### Compatibilidad con DRY

- Shadcn ya implementa DRY al proveer componentes reutilizables
- No duplicar lo que shadcn ya provee

### Compatibilidad con YAGNI

- No crear componentes personalizados "por si acaso"
- Usar shadcn directamente hasta que se necesite personalización real

### Compatibilidad con KISS

- Shadcn mantiene componentes simples y directos
- No complicar con abstracciones innecesarias sobre shadcn
